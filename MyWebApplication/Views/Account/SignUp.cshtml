@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model MyWebApplication.Models.ViewModel.UserModel
@{
    ViewBag.Title = "SignUp";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>SignUp</h2>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.LoginName, htmlAttributes: new { @class =
        "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LoginName, new { htmlAttributes = new {
            @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LoginName, "", new { @class =
            "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class =
        "control-label col-md-2" })
            <div class="col-md-10">
                @Html.PasswordFor(model => model.Password, new { @class = "form-control"
            } )
                @Html.ValidationMessageFor(model => model.Password, "", new { @class =
            "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class =
        "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new {
            @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger"
            })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class =
        "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new {
            @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class =
            "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class =
        "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Gender, new List<SelectListItem> {
            new SelectListItem { Text="Male", Value="M" },
            new SelectListItem { Text="Female", Value="F" }
            }, new { @class = "form-control" })
            </div>
        </div>
        <div class="row">
            <div style="margin: 16px; padding: 16px">
                <input class="form-control form-control-lg"
                       id="selectAvatar"
                       type="file" />
            </div>
            <div class="container">
                <div class="row">
                    <div class="col">
                        <h6>Image Preview:</h6>
                        <img class="img" id="avatar" />
                    </div>
                    <div class="col">
                        <h6>Base64 Output</h6>
                        <textarea id="textArea" name="ImageBase64" rows="30" cols="50"> </textarea>
                        <input type="hidden" id="hiddenImageBase64" name="AccountImage" value="" />

                    </div>
                    <div class="col" hidden>
                        @Html.TextBoxFor(model => model.AccountImage, new { type = "file", @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AccountImage, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Register" class="btn btn-default" />
            </div>
        </div>
    </div>
}<script>
      const input = document.getElementById("selectAvatar");
      const avatar = document.getElementById("avatar");
      const textArea = document.getElementById("textArea");
      const hiddenImageBase64 = document.getElementById("hiddenImageBase64");

      const convertBase64 = (file) => {
          return new Promise((resolve, reject) => {
              const fileReader = new FileReader();
              fileReader.readAsDataURL(file);

              fileReader.onload = () => {
                  resolve(fileReader.result);
              };

              fileReader.onerror = (error) => {
                  reject(error);
              };
          });
      };

      const uploadImage = async (event) => {
          const file = event.target.files[0];
          const base64 = await convertBase64(file);
          avatar.src = base64;
          textArea.innerText = base64;
          hiddenImageBase64.value = base64;
      };

      input.addEventListener("change", (e) => {
          uploadImage(e);
      });
</script>
<div>
    @Html.ActionLink("Back to Main", "Index","Home")
</div>
